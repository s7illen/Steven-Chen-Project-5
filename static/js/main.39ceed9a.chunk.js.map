{"version":3,"sources":["firebase.js","status.js","dialog.js","ask.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Status","console","log","Dialog","Ask","i","useState","App","state","questionlist","database","ref","on","response","whateverList","val","setState","choice","question","axios","url","dataType","method","params","reqUrl","xmlToJSON","then","res","dog","data","_embedded","tags","value","className","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wUAaAA,IAASC,cAVc,CACnBC,OAAQ,0CACRC,WAAY,iCACZC,YAAa,wCACbC,UAAW,iBACXC,cAAe,6BACfC,kBAAmB,eACnBC,MAAO,8CAKIR,QAAf,ECHeS,EAVA,WAGX,OAFAC,QAAQC,IAAK,WAGT,sDCKOC,EATA,WAEX,OACI,8CCeOC,EAhBH,WAER,IAAMC,EAAIC,qBAIV,OAFAL,QAAQC,IAAIG,GAGR,mDAGI,8CACA,gDC2CGE,G,kBA/Cb,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CACXC,aAAa,IAHH,E,iFAOO,IAAD,OAEJlB,EAASmB,WAAWC,MAC5BC,GAAG,SAAS,SAACC,GAElB,IAAMC,EAAeD,EAASE,MAE7Bd,QAAQC,IAAIY,GAEZ,EAAKE,SAAS,CAACP,aAAcK,IAE7Bb,QAAQC,IAAI,EAAKM,MAAMC,aAAaQ,OAAO,GAAGC,aAIhDC,IAAM,CACJC,IAAK,6BACLC,SAAU,OACVC,OAAQ,MACRC,OAAQ,CACNC,OAAQ,mDACRC,WAAW,KAEZC,MAAK,SAAUC,GAChB,IAAMC,EAAMD,EAAIE,KAAKC,UAAUC,KAAK,GAAGC,MACvC/B,QAAQC,IAAI0B,Q,+BAKd,OACE,yBAAKK,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GA1CUC,cCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,MAAK,SAAAqB,GACjCA,EAAaC,kB","file":"static/js/main.39ceed9a.chunk.js","sourcesContent":["import firebase from 'firebase/app'\nimport \"firebase/database\"\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyD-w3DBlvAvvRskQNSF1yoKrrcRN_oTE0w\",\n    authDomain: \"fake-interview.firebaseapp.com\",\n    databaseURL: \"https://fake-interview.firebaseio.com\",\n    projectId: \"fake-interview\",\n    storageBucket: \"fake-interview.appspot.com\",\n    messagingSenderId: \"284782516391\",\n    appId: \"1:284782516391:web:c14c49534de8257f39a382\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;","import React from 'react';\n\nconst Status = () => {\n    console.log ('ttturmp')\n\n    return(\n        <div>\n            Mighty Trump Status!\n        </div>\n    )\n}\n\nexport default Status;","import React from 'react';\n\nconst Dialog = () => {\n\n    return (\n        <div>\n            Interview UI\n        </div>\n    )\n}\n\nexport default Dialog;","import React, { useState } from 'react';\n\n//i tried to use state object from app.js, but it didn't work, you cannot get state value from component other than using hook, which I never learn, I deplyed the hood (use state), it shows something emty, maybe because things rendered before api/backend call, but it shouldn't happen in react because everything should update all the time. if everything failed, try to use prop.\n\nconst Ask = () => {\n\n    const i = useState();\n\n    console.log(i);\n\n    return (\n        <div>\n            Pick your Questions\n            {/* <button>{App.state.questionlist.choice[0].question}</button> */}\n            <button>Question 2</button>\n            <button>Question 3</button>\n        </div>\n    )\n}\n\nexport default Ask;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport firebase from './firebase';\nimport Status from './status';\nimport Dialog from './dialog';\nimport Ask from './ask';\nimport './App.css';\n\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      questionlist:{}\n    }\n  }\n\n  componentDidMount() {\n\n    const dbRef = firebase.database().ref();\n    dbRef.on('value', (response) => {\n      // console.log(response.val().choice[0].question);\n     const whateverList = response.val();\n\n      console.log(whateverList);\n\n      this.setState({questionlist: whateverList});\n\n      console.log(this.state.questionlist.choice[0].question);\n    });\n\n\n    axios({\n      url: 'http://proxy.hackeryou.com',\n      dataType: 'json',\n      method: 'GET',\n      params: {\n        reqUrl: 'https://api.tronalddump.io/tag/Hillary%20Clinton',\n        xmlToJSON: false\n      }\n    }).then(function (res) {\n      const dog = res.data._embedded.tags[0].value;\n      console.log(dog)\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Status />\n        <Dialog />\n        <Ask />\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n// var randomProperty = function (obj) {\n//   var keys = Object.keys(obj)\n//   return obj[keys[keys.length * Math.random() << 0]];\n// };","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}