{"version":3,"sources":["firebase.js","dialog.js","ask.js","result.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Dialog","state","quote","api","apiList","this","props","askedQuestion","length","forEach","i","push","trumpTalk","setState","console","log","map","question","Component","Ask","displayOrNot","round","display","setChoice1","selected","userChoice","q1","handler","setChoice2","q2","setChoice3","q3","className","onClick","Result","App","questionDisplay","question1","questionList","question2","question3","questionSelected","updateAskedHandler","q","updateQuoteHandler","quoteList","allQuestions","interest","newsValue","database","ref","on","response","whateverList","val","choice","shuffledList","x","Math","floor","random","splice","axios","url","dataType","method","params","reqUrl","xmlToJSON","then","res","data","_embedded","tags","value","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.42600a26.chunk.js","sourcesContent":["import firebase from 'firebase/app'\nimport \"firebase/database\"\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyD-w3DBlvAvvRskQNSF1yoKrrcRN_oTE0w\",\n    authDomain: \"fake-interview.firebaseapp.com\",\n    databaseURL: \"https://fake-interview.firebaseio.com\",\n    projectId: \"fake-interview\",\n    storageBucket: \"fake-interview.appspot.com\",\n    messagingSenderId: \"284782516391\",\n    appId: \"1:284782516391:web:c14c49534de8257f39a382\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;","import React, { Component } from 'react';\n\nclass Dialog extends Component {\n    constructor() {\n        super();\n        this.state = {\n            quote: [],\n            api: [],\n        }\n    }\n\n    componentDidMount(){\n        \n    }\n\n    componentDidUpdate(){\n\n        \n        //this pushes api to the stateapilist, but because using componentDidUpdate, api pushes \n        \n\n        let apiList = [];\n       \n\n        // if (this.props.askedQuestion.length > 0) {\n        //     this.props.askedQuestion.map((i) => {\n        //         return (\n        //             apiList.push(i.api)\n        //         )\n        //     })\n        // }\n\n        // let apiQuote = 'dsdsdd'; \n\n        // let getApiQuote = (x) => {\n        //     axios({\n        //         url: 'http://proxy.hackeryou.com',\n        //         dataType: 'json',\n        //         method: 'GET',\n        //         params: {\n        //             reqUrl: 'https://api.tronalddump.io/tag/' + x,\n        //             xmlToJSON: false\n        //         }\n        //     }).then((res) => {\n        //         // return res.data._embedded.tags[0].value;\n        //         console.log(res.data._embedded.tags[0].value);\n        //         // apiQuote = res.data._embedded.tags[0].value\n        //         // apiQuote = res.data._embedded.tags[0].value;\n        //         // this.setState({ apiData:res.data._embedded.tags[0].value });\n\n        //         // console.log(apiQuote);\n        //         apiList.push(res.data._embedded.tags[0].value);\n        //     })\n        // }\n\n        // apiList.push(getApiQuote(i.api))\n\n        if (this.props.askedQuestion.length > 0) {\n            this.props.askedQuestion.forEach((i) => {\n               apiList.push(i.trumpTalk)\n            })\n        }\n\n        if (apiList.length !== this.state.api.length) {\n            this.setState({ api: apiList })\n            console.log(apiList)\n        }\n\n        // if (this.state.api.length > 0) {\n        //     this.state.api.map((i) => {\n        //         if(i===0){return (quoteList.push(i.api))}\n        //         else{return 0}\n        //     })\n        // }\n\n\n        \n        // console.log(this.state.api)\n\n        // let quoteId = '';\n\n        //     this.props.askedQuestion.map((i) => {\n        //         return (quoteId = i.api)\n        //     }, () => { console.log(quoteId) })\n\n\n\n    }\n\n\n\n\n\n//this.props.handler(quote)\n\n    //update thequotelist for each question in the askedquestion list\n\n\n    render(){\n        return(\n            <div>\n                <h2>DIALOG</h2>\n                {this.props.askedQuestion.map((i) => {\n                    return (<p>{i.question}</p>)\n                })}\n                {this.props.askedQuestion.map((i) => {\n                    return (<p>{i.trumpTalk}</p>)\n                })}\n            </div>\n        )\n    }\n\n}\n\nexport default Dialog;","import React, { Component } from 'react';\n\n//i tried to use state object from app.js, but it didn't work, you cannot get state value from component other than using hook, which I never learn, I deplyed the hood (use state), it shows something emty, maybe because things rendered before api/backend call, but it shouldn't happen in react because everything should update all the time. if everything failed, try to use prop.\n\n\n// transfer questionChoice arr to this component by using props\n// display firtst three items.question in the arr by creating three buttons\n// whenever user picked a buttons, get another three new items.question from the arr\n\nclass Ask extends Component {\n    constructor() {\n        super();\n        this.state = {\n            userChoice: {},\n            display: true\n        }\n    }\n\n// !cannot make the setChoice DRY due to fail to grab the value on the button\n\n    displayOrNot = () => {\n        if (this.props.round === 5) {\n            this.setState({ display: false });\n        }\n    }\n\n    setChoice1 = () => {\n        this.props.selected();\n        this.setState ({\n            userChoice: this.props.q1\n        }, () => {\n            this.props.handler(this.state.userChoice);\n            this.displayOrNot()\n        })\n    }\n\n    setChoice2 = () => {\n        this.props.selected();\n        this.setState({\n            userChoice: this.props.q2\n        }, () => {\n            this.props.handler(this.state.userChoice)\n            this.displayOrNot()\n        });\n    }\n\n    setChoice3 = () => {\n        this.props.selected();\n        this.setState({\n            userChoice: this.props.q3\n        }, () => {\n            this.props.handler(this.state.userChoice)\n            this.displayOrNot()\n        });\n    }\n\n\n    render(){\n        return (\n            <div className={this.state.display ? '' : 'hidden'}>\n                <button onClick={this.setChoice1}>Question A {this.props.q1.question}</button>\n                <button onClick={this.setChoice2}>Question B {this.props.q2.question}</button>\n                <button onClick={this.setChoice3}>Question C {this.props.q3.question}</button>\n            </div>\n        )\n    }\n\n}\n\nexport default Ask;","import React from 'react';\n\nconst Result = () => {\n\n\n    return (\n        <div>\n           <h2>Great Interview</h2>\n        </div>\n    )\n\n    \n}\n\nexport default Result;","import React, { Component } from 'react';\nimport firebase from './firebase';\nimport axios from 'axios';\nimport Dialog from './dialog';\nimport './App.css';\nimport Ask from './ask';\nimport Result from './result'\n\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      allQuestions: [],\n      questionList: [],\n      askedQuestion: [],\n      round: 0,\n      question1: '',\n      question2: '',\n      question3: '',\n      display: true,\n      quoteList: [],\n      interest: 5,\n      newsValue: 0\n    }\n  }\n\n  //create a function that pick a question randomly from question list(state), save it as a var, also remove it from the question list(state)\n\n  componentDidMount() {\n\n    const dbRef = firebase.database().ref();\n    dbRef.on('value', (response) => {\n      // console.log(response.val().choice[0].question);\n      const whateverList = response.val().choice;\n\n      // console.log(whateverList);\n\n      this.setState({allQuestions: whateverList});\n\n      console.log(this.state.allQuestions);\n\n      // console.log(this.state.allQuestions.choice.id0.question);\n\n      const shuffledList = [];\n      for (let i = 0; i < 18; i++) {\n        const x = Math.floor(Math.random() * this.state.allQuestions.length);\n        shuffledList.push(this.state.allQuestions[x]);\n        this.state.allQuestions.splice(x, 1);\n      }\n      this.setState({ questionList: shuffledList });\n      console.log(this.state.questionList)\n\n      this.questionDisplay();\n      // console.log(this.state.question3)\n\n    })\n\n\n    \n    // axios({\n    //   url: 'http://proxy.hackeryou.com',\n    //   dataType: 'json',\n    //   method: 'GET',\n    //   params: {\n    //     reqUrl: 'https://api.tronalddump.io/tag/Hillary%20Clinton',\n    //     xmlToJSON: false\n    //   }\n    // }).then(function (res) {\n    //   const dog = res.data._embedded.tags[0].value;\n    //   console.log(dog)\n    // });\n\n  }\n\n  componentDidUpdate() {\n\n  //   if (this.state.askedQuestion.length > 0) {\n  //       this.state.askedQuestion.forEach( (i) => {\n  //         if(i.api !== 0){\n            \n            // () => {\n            //   axios({\n            //     url: 'http://proxy.hackeryou.com',\n            //     dataType: 'json',\n            //     method: 'GET',\n            //     params: {\n            //       reqUrl: 'https://api.tronalddump.io/tag/' + i.api,\n            //       xmlToJSON: false\n            //     }\n            //   }).then(function (res) {\n            //     i.interest = res.data._embedded.tags[0].value\n            //   });\n  //       // }\n        \n  //     }\n  //   }\n  // }\n\n    // !!!cannot force re-render after api call's been made, the trumptalk display always renders before the api call, trumptalk can only display correctly after another question button being clicked\n    \n\n    if (this.state.askedQuestion.length > 0){\n      this.state.askedQuestion.forEach(\n        (i) => {\n          if(i.api !==0){\n              axios({\n                url: 'http://proxy.hackeryou.com',\n                dataType: 'json',\n                method: 'GET',\n                params: {\n                  reqUrl: 'https://api.tronalddump.io/tag/' + i.api,\n                  xmlToJSON: false\n                }\n              }).then(function (res) {\n                i.trumpTalk = res.data._embedded.tags[0].value;\n              })\n          }\n        }\n      )\n    }\n\n}\n\n \n\n  // displayOrNot = () => {\n  //   if (this.state.round === 1) {\n  //     this.setState({ display: false },()=>{\n  //       console.log(this.state.display)\n  //     });\n  //   }\n  // }\n\n\n\n  // randomQuestion = () => {\n  //   // const random = Math.floor(Math.random() * this.state.allQuestions.length);\n  //   // const first = this.state.allQuestions[random];\n  //   // const shuffled = this.state.allQuestions.sort(() => 0.5 - Math.random());\n  //   // let shuffledList = shuffled.slice(0, 8);\n  //   //push it to the questionList array\n  //   // remove this question from the allQuestions\n  //   const shuffledList = [];\n  //   for (let i = 0; i < 3; i++) {\n  //     const x = Math.floor(Math.random() * this.state.allQuestions.length);\n  //     shuffledList.push(this.state.allQuestions[x]);\n  //     this.state.allQuestions.splice(x, 1);\n  //   }\n  //   this.setState({questionList: shuffledList});\n  //   console.log(this.state.questionList)\n  // }\n\n  questionDisplay = () => {\n    this.setState({ question1: this.state.questionList[this.state.round * 3], question2: this.state.questionList[this.state.round * 3 + 1], question3: this.state.questionList[this.state.round * 3 + 2]})\n  }\n\n  questionSelected = () => {\n    this.setState({ round: this.state.round + 1 },() =>{\n    this.questionDisplay();\n    console.log('current round:', this.state.round)\n    });\n  }\n\n  updateAskedHandler = (q) => {\n    this.setState({ askedQuestion: [...this.state.askedQuestion, q] }, () => {\n      console.log(this.state.askedQuestion)\n    });\n  }\n\n  updateQuoteHandler = (q) => {\n    this.setState({ quoteList: [...this.state.quoteList, q] }, () => {\n      console.log(this.state.quoteList)\n    });\n  }\n\n  // stopInterview = () => {\n  //   if (this.state.round === 1) {\n  //     console.log('555')\n  //   }\n  // }\n\n  // this.state.askedQuestion.push(q) \\/\n  // when user selected a question, save it into asked question array \\/\n  // display the question in dialog section \\/\n  // get api response refer to the askedquestion \\/\n  // display the api quote on the page \\/\n  // change state.interest value refer to the askedquestion\n  // change newsValue value refer to the askedquestion\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Dialog askedQuestion={this.state.askedQuestion} quoteList={this.state.quoteList} handler={this.updateQuoteHandler}/>\n        <Ask q1={this.state.question1} q2={this.state.question2} q3={this.state.question3} handler={this.updateAskedHandler} selected={this.questionSelected} round={this.state.round} displayOrNot={this.displayOrNot}/>\n        <Result />\n        {/* <button onClick={this.questionSelected}>Question A {this.state.question1.question}</button>\n        <button onClick={this.questionSelected}>Question B {this.state.question2.question}</button>\n        <button onClick={this.questionSelected}>Question C {this.state.question3.question}</button> */}\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}